# dumping object member vaiables
# https://stackoverflow.com/questions/39013249/metaclass-in-python-3
class MetaTable(type):
	def __getattr__(cls, key):
		temp = key.split("__")
		name = temp[0]
		alias = None
		if len(temp) > 1:
			alias = temp[1]
		return cls(name, alias)

class Table(object, metaclass=MetaTable):
	def __init__(self, name, alias=None):
		self._name = name
		self._alias = alias


d = Table
d.student__s



OR  >>> https://docs.python.org/3/howto/sorting.html

class Student:
    def __init__(self, name, grade, age):
        self.name = name
        self.grade = grade
        self.age = age
    def __repr__(self):
        return repr((self.name, self.grade, self.age))






movie_picker Tool use cases

as script:
	args
	-l  list entries
	-u	update db from directory		dir/						EG -u dir/ to search for updates
	-d	dont save results
	-ec	count extension in target  		'.mp4': 126, '.mkv': 85, '.wmv': 74, '.avi': 51,


	-h	print help
	-db	location of pickled ‘db’ file	dir/	dir/file.pickle 	EG -l dir/medialib.pickle
	-f 	find db files												EG -f dir/ to search
	-rb	build db from scratch	



as module - import Mmdialib, Mmedia			# multi media library, 	multi media object
	API
	mmdialib = Mmdialib.new(path)			# load pickle file / create library  if none exists

	for m in mmadialib:						# iterable
		print(m.title)
		print(m.synopsis)

	
	query = medialib.all()
	

	mmdialib.query({‘title’:”Joker”})		# simplified searchable - query(include_dict, exclude_dict)
	>list of Mmedia object

	mmdialib.query({‘title’:”Joker”, ‘year’:2019})
	>list of Mmedia object

	mmdialib.query({‘genres’:”Comedy”})
	>list of Mmedia object
	
	